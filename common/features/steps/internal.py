from behave import *
from nose.tools.trivial import ok_
from of.common.internal import node_id_with_env, not_implemented
from of.schemas.constants import id_users

use_step_matcher("re")


@then("the correct value should be generated by node_id_with_env")
def step_impl(context):
    """
    :type context behave.runner.Context
    """
    ok_(node_id_with_env(id_users, "111100000000000000000000") == "111100010000010001e64c25")

@given("a class has and unimplemented method")
def step_impl(context):
    """
    :type context behave.runner.Context
    """
    class UnimplementedClass(object):
        @not_implemented
        def not_implemented_function(self):
            pass
    context.TestInstance = UnimplementedClass()

@then("an error should be raised calling that method")
def step_impl(context):
    """
    :type context behave.runner.Context
    """
    try:
        context.TestInstance.not_implemented_function()
        ok_(False)
    except NotImplementedError:
        ok_(True)

